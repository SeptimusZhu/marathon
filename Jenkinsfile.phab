node('JenkinsMarathonCI-Debian8-1-2017-02-23') {
  try {
    stage("Checkout") {
      git changelog: false, credentialsId: '4ff09dce-407b-41d3-847a-9e6609dd91b8', poll: false, url: 'git@github.com:mesosphere/marathon.git'
      sh "git clean -fdx"
      sh """jq -n --arg revision_id $REVISION_ID  '{revision_id: $revision_id, action: "reject", silent: true }' | arc call-conduit differential.createcomment"""
    }
    stage("Install mesos") {
      sh """if grep -q MesosDebian \$WORKSPACE/project/Dependencies.scala; then
                    MESOS_VERSION=\$(sed -n 's/^.*MesosDebian = "\\(.*\\)"/\\1/p' <\$WORKSPACE/project/Dependencies.scala)
                  else
                     MESOS_VERSION=\$(sed -n 's/^.*mesos=\\(.*\\)&&.*/\\1/p' <\$WORKSPACE/Dockerfile)
                  fi
                  sudo apt-get install -y --force-yes --no-install-recommends mesos=\$MESOS_VERSION
              """
    }
    stage("Apply $DIFF_ID - $REVISION_ID") {
      // TODO: Broken JQ?
      sh "ls -al `which jq`"
      sh "chmod +x `which jq`"
      sh """jq -n --arg phid $PHID {buildTargetPHID: $phid, type: "work"} | arc call-conduit harbormaster.sendmessage"""
      sh """jq -n --arg phid $PHID --arg url $URL {buildTargetPHID: $phid, artifactType: "uri", artifactKey: $url, artifactData: { uri: $url, name: "Velocity Results", ui.external: "true" } } | arc call-conduit harbormaster.createartifact"""
      sh """arc patch $DIFF_ID"""
    }
    stage("Kill junk processes") {
      sh "bin/kill-stale-test-processes"
    }
    stage("Compile") {
      withEnv(['RUN_DOCKER_INTEGRATION_TESTS=true', 'RUN_MESOS_INTEGRATION_TESTS=true']) {
        sh "sudo -E sbt -Dsbt.log.format=false clean test:compile scapegoat doc"
        sh "if [[ git diff --quiet ]]; then exit 1"
      }
    }
    stage("Test") {
      try {
        timeout(time: 30, unit: 'Minutes') {
          withEnv(['RUN_DOCKER_INTEGRATION_TESTS=true', 'RUN_MESOS_INTEGRATION_TESTS=true']) {
            sh """sudo -E sbt -Dsbt.log.format=false coverage test coverageReport"""
          }
        }
      } finally {
        junit allowEmptyResults: true, testResults: 'target/test-reports/**/*.xml'
        archiveArtifacts(
                artifacts: 'target/**/coverage-report/cobertura.xml, target/**/scoverage-report/**',
                allowEmptyArchive: true)
      }
    }
    stage("Integration Test") {
      try {
        timeout(time: 30, unit: 'MINUTES') {
          withEnv(['RUN_DOCKER_INTEGRATION_TESTS=true', 'RUN_MESOS_INTEGRATION_TESTS=true']) {
            sh "sudo -E sbt -Dsbt.log.format=false clean coverage integration:test coverageReport mesos-simulation/integration:test"
          }
        }
      } finally {
        junit allowEmptyResults: true, testResults: 'target/test-reports/*integration/**/*.xml'
        // scoverage does not allow the configuration of a different output
        // path: https://github.com/scoverage/sbt-scoverage/issues/211
        // The archive steps does not allow a different target path. So we
        // move the files to avoid conflicts with the reports from the unit
        // test run.
        sh "sudo mv target/scala-2.11/scoverage-report/ target/scala-2.11/scoverage-report-integration"
        sh "sudo mv target/scala-2.11/coverage-report/cobertura.xml target/scala-2.11/coverage-report/cobertura-integration.xml"
        archiveArtifacts(
                artifacts: 'target/**/coverage-report/cobertura-integration.xml, target/**/scoverage-report-integration/**',
                allowEmptyArchive: true)
      }
    }
    stage("Unstable Test") {
      try {
        timeout(time: 60, unit: 'MINUTES') {
          withEnv(['RUN_DOCKER_INTEGRATION_TESTS=true', 'RUN_MESOS_INTEGRATION_TESTS=true']) {
            sh "sudo -E sbt -Dsbt.log.format=false clean coverage unstable:test unstable-integration:test coverageReport"
          }
        }
        junit allowEmptyResults: true, testResults: 'target/test-reports/unstable-integration/**/*.xml'
        junit allowEmptyResults: true, testResults: 'target/test-reports/unstable/**/*.xml'
        // scoverage does not allow the configuration of a different output
        // path: https://github.com/scoverage/sbt-scoverage/issues/211
        // The archive steps does not allow a different target path. So we
        // move the files to avoid conflicts with the reports from the unit
        // test run.
        sh "sudo mv target/scala-2.11/scoverage-report/ target/scala-2.11/scoverage-report-unstable"
        sh "sudo mv target/scala-2.11/coverage-report/cobertura.xml target/scala-2.11/coverage-report/cobertura-unstable.xml"
        archiveArtifacts(
                artifacts: 'target/**/coverage-report/cobertura-integration.xml, target/**/scoverage-report-integration/**',
                allowEmptyArchive: true)
      } catch (Exception err) {
        sh """jq -n --arg revision_id $REVISION_ID  '{revision_id: $revision_id, silent: true, message: "Warning: Has Unstable Tets.: $BUILD_URL" }' | arc call-conduit differential.createcomment"""
      }
    }
  } catch (Exception err) {
    sh """jq -n --arg revision_id $REVISION_ID  '{revision_id: $revision_id, action: "reject", silent: true, message: "Build FAILED ${
      err
    }: $BUILD_URL" }' | arc call-conduit differential.createcomment"""
    // TODO: Need to include unit tests via JSON and code coverage
    sh """jq -n --arg phid $PHID {buildTargetPHID: $PHID, type: "fail"} | arc call-conduit harbormaster.sendmessage"""
    throw err
  }
  sh """jq -n --arg revision_id $REVISION_ID  '{revision_id: $revision_id, action: "accept", silent: true, message: "Build Succeeded: $BUILD_URL" }' | arc call-conduit differential.createcomment"""
  // TODO: Need to include unit tests via json and code coverage
  sh """jq -n --arg phid $PHID {buildTargetPHID: $PHID, type: "pass"} | arc call-conduit harbormaster.sendmessage"""
}
